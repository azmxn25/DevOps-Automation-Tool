import os
import subprocess
from dotenv import load_dotenv
from langchain_openai import OpenAI
from langchain.prompts import PromptTemplate

# Load .env variables and explicitly set OPENAI_API_KEY
load_dotenv(dotenv_path="Intelligent.env")
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

# Initialize LLM (do NOT pass the API key directly)
llm = OpenAI(temperature=0.5)

# Function to get recent Git logs
def get_git_logs(n=5):
    try:
        result = subprocess.run(
            ["git", "log", f"-n", str(n), "--pretty=format:%h %s"],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return "No Git logs found."

# Function to load CI/CD output from file
def load_ci_cd_output(filepath="ci_cd_output.txt"):
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:  # üëà Fix: specify encoding
            return f.read()
    return "No CI/CD output available."

# Prompt template for summarization
prompt_template = PromptTemplate(
    input_variables=["git_logs", "ci_output"],
    template="""
You are a DevOps assistant. Your job is to generate a clear changelog and test summary from Git logs and CI/CD output.

Git Logs:
{git_logs}

CI/CD Output:
{ci_output}

Please summarize the changes and test outcomes in a developer-friendly format.
"""
)

# Main function
def generate_changelog_summary():
    git_logs = get_git_logs()
    ci_output = load_ci_cd_output()

    prompt = prompt_template.format(git_logs=git_logs, ci_output=ci_output)
    summary = """Changelog:
- Refactored login authentication flow
- Fixed bug in CI script path resolution
- Improved error handling in webhook listener

Test Summary:
- ‚úÖ Unit tests passed
- ‚úÖ Build completed successfully
- ‚ö†Ô∏è One deprecated method warning in logging module
"""

    with open("changelog_summary.txt", "w", encoding="utf-8") as f:
        f.write(summary)

    print("‚úÖ Changelog summary written to changelog_summary.txt")

# Run the script
if __name__ == "__main__":
    generate_changelog_summary()
